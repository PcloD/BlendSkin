#define BLOCK_SIZE 32

struct BoneWeight4
{
    int indices[4];
    float weights[4];
};

int _NumVertices;
float _BlendWeight;

StructuredBuffer<float3> _BasePoints;
StructuredBuffer<float3> _BaseNormals;
StructuredBuffer<float4> _BaseTangents;

StructuredBuffer<float4x4> _Bones;
StructuredBuffer<BoneWeight4> _BoneWeights4;
StructuredBuffer<float3> _SrcPoints;
StructuredBuffer<float3> _SrcNormals;
StructuredBuffer<float4> _SrcTangents;

RWStructuredBuffer<float3> _DstPoints;
RWStructuredBuffer<float3> _DstNormals;
RWStructuredBuffer<float4> _DstTangents;

inline void apply_skinning4(int vi, out float3 o_point, out float3 o_normal, out float4 o_tangent)
{
    float4 spoint = float4(_SrcPoints[vi], 1.0);
    float4 snormal = float4(_SrcNormals[vi], 0.0f);
    float4 stangent = _SrcTangents[vi];

    float3 dpoint = float3(0.0f, 0.0f, 0.0f);
    float3 dnormal = float3(0.0f, 0.0f, 0.0f);
    float3 dtangent = float3(0.0f, 0.0f, 0.0f);

    for (int bi = 0; bi < 4; ++bi) {
        float w = _BoneWeights4[vi].weights[bi];
        if (w <= 0.0f)
            continue;
        float4x4 bone = _Bones[_BoneWeights4[vi].indices[bi]];

        dpoint += mul(bone, spoint).xyz * w;
        dnormal += mul(bone, snormal).xyz * w;
        dtangent += mul(bone, float4(stangent.xyz, 0.0)).xyz * w;
    }

    o_point = dpoint;
    o_normal = normalize(dnormal);
    o_tangent = float4(normalize(dtangent), stangent.w);
}

#pragma kernel Skinning4
[numthreads(BLOCK_SIZE, 1, 1)]
void Skinning4(uint3 tid : SV_DispatchThreadID)
{
    int vi = tid.x;

    float3 p;
    float3 n;
    float4 t;
    apply_skinning4(vi, p, n, t);

    _DstPoints[vi] = p;
    _DstNormals[vi] = n;
    _DstTangents[vi] = t;
}


#pragma kernel BlendPrepare
[numthreads(BLOCK_SIZE, 1, 1)]
void BlendPrepare(uint3 tid : SV_DispatchThreadID)
{
    int vi = tid.x;

    _DstPoints[vi] = _BasePoints[vi];
    _DstNormals[vi] = _BaseNormals[vi];
    _DstTangents[vi] = _BaseTangents[vi];
}

#pragma kernel BlendAdd
[numthreads(BLOCK_SIZE, 1, 1)]
void BlendAdd(uint3 tid : SV_DispatchThreadID)
{
    int vi = tid.x;

    float3 p = _SrcPoints[vi];
    float3 n = _SrcNormals[vi];
    float4 t = _SrcTangents[vi];

    _DstPoints[vi] += (p - _BasePoints[vi]) * _BlendWeight;
    _DstNormals[vi] += (n - _BaseNormals[vi]) * _BlendWeight;
    _DstTangents[vi].xyz += (t.xyz - _BaseTangents[vi].xyz) * _BlendWeight;
}

#pragma kernel BlendAddSkinning4
[numthreads(BLOCK_SIZE, 1, 1)]
void BlendAddSkinning4(uint3 tid : SV_DispatchThreadID)
{
    int vi = tid.x;

    float3 p;
    float3 n;
    float4 t;
    apply_skinning4(vi, p, n, t);

    _DstPoints[vi] += (p - _BasePoints[vi]) * _BlendWeight;
    _DstNormals[vi] += (n - _BaseNormals[vi]) * _BlendWeight;
    _DstTangents[vi].xyz += (t.xyz - _BaseTangents[vi].xyz) * _BlendWeight;
}

#pragma kernel BlendFinish
[numthreads(BLOCK_SIZE, 1, 1)]
void BlendFinish(uint3 tid : SV_DispatchThreadID)
{
    int vi = tid.x;

    _DstNormals[vi] = normalize(_DstNormals[vi]);
    _DstTangents[vi] = float4(normalize(_DstTangents[vi].xyz), _DstTangents[vi].w);
}
